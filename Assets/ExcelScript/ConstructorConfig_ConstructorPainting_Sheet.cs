//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace ExcelConfig
{
	[Serializable]
	public class ConstructorPainting : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _id;
		public int id { get { return _id; } }

		[SerializeField]
		private int _type;
		public int type { get { return _type; } }

		[SerializeField]
		private string _c_name;
		public string c_name { get { return _c_name; } }

		[SerializeField]
		private string _name;
		public string name { get { return _name; } }

		[SerializeField]
		private string _material;
		public string material { get { return _material; } }

		[SerializeField]
		private string _color;
		public string color { get { return _color; } }


		public ConstructorPainting()
		{
		}

#if UNITY_EDITOR
		public ConstructorPainting(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _id);
			TryParse(sheet[row][column++], out _type);
			TryParse(sheet[row][column++], out _c_name);
			TryParse(sheet[row][column++], out _name);
			TryParse(sheet[row][column++], out _material);
			TryParse(sheet[row][column++], out _color);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class ConstructorConfig_ConstructorPainting_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<ConstructorPainting> elements = new List<ConstructorPainting>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as ConstructorPainting);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
