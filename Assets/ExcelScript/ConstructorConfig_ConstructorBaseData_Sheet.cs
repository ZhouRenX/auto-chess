//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace ExcelConfig
{
	[Serializable]
	public class ConstructorBaseData : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _ID;
		public int ID { get { return _ID; } }

		[SerializeField]
		private string _name;
		public string name { get { return _name; } }

		[SerializeField]
		private string _prefab;
		public string prefab { get { return _prefab; } }

		[SerializeField]
		private string _type;
		public string type { get { return _type; } }

		[SerializeField]
		private int _level;
		public int level { get { return _level; } }

		[SerializeField]
		private string _property1;
		public string property1 { get { return _property1; } }

		[SerializeField]
		private string _property2;
		public string property2 { get { return _property2; } }

		[SerializeField]
		private string _property3;
		public string property3 { get { return _property3; } }

		[SerializeField]
		private string _PaintingType;
		public string PaintingType { get { return _PaintingType; } }

		[SerializeField]
		private string[] _valueChanges;
		public string[] valueChanges { get { return _valueChanges; } }

		[SerializeField]
		private int[] _slots;
		public int[] slots { get { return _slots; } }

		[SerializeField]
		private int[] _skillID;
		public int[] skillID { get { return _skillID; } }


		public ConstructorBaseData()
		{
		}

#if UNITY_EDITOR
		public ConstructorBaseData(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _ID);
			TryParse(sheet[row][column++], out _name);
			TryParse(sheet[row][column++], out _prefab);
			TryParse(sheet[row][column++], out _type);
			TryParse(sheet[row][column++], out _level);
			TryParse(sheet[row][column++], out _property1);
			TryParse(sheet[row][column++], out _property2);
			TryParse(sheet[row][column++], out _property3);
			TryParse(sheet[row][column++], out _PaintingType);
			string[] _valueChangesArray = sheet[row][column++].Split(',');
			int _valueChangesCount = _valueChangesArray.Length;
			_valueChanges = new string[_valueChangesCount];
			for(int i = 0; i < _valueChangesCount; i++)
				TryParse(_valueChangesArray[i], out _valueChanges[i]);
			string[] _slotsArray = sheet[row][column++].Split(',');
			int _slotsCount = _slotsArray.Length;
			_slots = new int[_slotsCount];
			for(int i = 0; i < _slotsCount; i++)
				TryParse(_slotsArray[i], out _slots[i]);
			string[] _skillIDArray = sheet[row][column++].Split(',');
			int _skillIDCount = _skillIDArray.Length;
			_skillID = new int[_skillIDCount];
			for(int i = 0; i < _skillIDCount; i++)
				TryParse(_skillIDArray[i], out _skillID[i]);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class ConstructorConfig_ConstructorBaseData_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<ConstructorBaseData> elements = new List<ConstructorBaseData>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as ConstructorBaseData);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
