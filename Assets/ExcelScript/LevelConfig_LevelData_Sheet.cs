//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace ExcelConfig
{
	[Serializable]
	public class LevelData : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private string _ID;
		public string ID { get { return _ID; } }

		[Serializable]
		public class enemiesClass
		{
			public int id;
			public int x;
			public int y;
			public int z;
		}
		[SerializeField]
		private enemiesClass[] _enemies;
		public enemiesClass[] enemies { get { return _enemies; } }

		[SerializeField]
		private int[] _rewardEventIDs;
		public int[] rewardEventIDs { get { return _rewardEventIDs; } }


		public LevelData()
		{
		}

#if UNITY_EDITOR
		public LevelData(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _ID);
			string rawenemies = sheet[row][column++];
			string[] subsenemies_0 = rawenemies.Split(';');
			_enemies = new enemiesClass[subsenemies_0.Length];
			for (int j = 0; j < subsenemies_0.Length; ++j)
			{
				var _enemiesone = new enemiesClass();
				_enemies[j] = _enemiesone;
				string[] subsenemies_1 = subsenemies_0[j].Split(',');
				for (int i = 0; i < subsenemies_1.Length; ++i)
				{
					var strValue = subsenemies_1[i];
					if (i == 0)
						TryParse(strValue, out _enemiesone.id);
					else if (i == 1)
						TryParse(strValue, out _enemiesone.x);
					else if (i == 2)
						TryParse(strValue, out _enemiesone.y);
					else if (i == 3)
						TryParse(strValue, out _enemiesone.z);
				}
			}
			string[] _rewardEventIDsArray = sheet[row][column++].Split(',');
			int _rewardEventIDsCount = _rewardEventIDsArray.Length;
			_rewardEventIDs = new int[_rewardEventIDsCount];
			for(int i = 0; i < _rewardEventIDsCount; i++)
				TryParse(_rewardEventIDsArray[i], out _rewardEventIDs[i]);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class LevelConfig_LevelData_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<LevelData> elements = new List<LevelData>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as LevelData);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
