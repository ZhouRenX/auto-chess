//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace ExcelConfig
{
	[Serializable]
	public class SkillData : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _ID;
		public int ID { get { return _ID; } }

		[SerializeField]
		private string _name;
		public string name { get { return _name; } }

		[SerializeField]
		private float _duration;
		public float duration { get { return _duration; } }

		[SerializeField]
		private int _effectiveTimes;
		public int effectiveTimes { get { return _effectiveTimes; } }

		[SerializeField]
		private bool _isDirectEffect;
		public bool isDirectEffect { get { return _isDirectEffect; } }

		[SerializeField]
		private float _castDelay;
		public float castDelay { get { return _castDelay; } }

		[SerializeField]
		private float _chargingDelay;
		public float chargingDelay { get { return _chargingDelay; } }

		[SerializeField]
		private int _manaCost;
		public int manaCost { get { return _manaCost; } }

		[SerializeField]
		private int _usableCount;
		public int usableCount { get { return _usableCount; } }

		[SerializeField]
		private string _description;
		public string description { get { return _description; } }

		[SerializeField]
		private int _distance;
		public int distance { get { return _distance; } }

		[SerializeField]
		private int _range;
		public int range { get { return _range; } }

		[SerializeField]
		private string _skillTargetType;
		public string skillTargetType { get { return _skillTargetType; } }

		[SerializeField]
		private string _skillTargetSelectorType;
		public string skillTargetSelectorType { get { return _skillTargetSelectorType; } }

		[SerializeField]
		private string _skillRangeSelectorType;
		public string skillRangeSelectorType { get { return _skillRangeSelectorType; } }

		[Serializable]
		public class damageDataClass
		{
			public int dmg;
			public float correction;
			public string type;
		}
		[SerializeField]
		private damageDataClass[] _damageData;
		public damageDataClass[] damageData { get { return _damageData; } }

		[SerializeField]
		private string[] _skillDecorators;
		public string[] skillDecorators { get { return _skillDecorators; } }

		[Serializable]
		public class paramValuesClass
		{
			public string name;
			public string value;
		}
		[SerializeField]
		private paramValuesClass[] _paramValues;
		public paramValuesClass[] paramValues { get { return _paramValues; } }

		[SerializeField]
		private int[] _addBuffs;
		public int[] addBuffs { get { return _addBuffs; } }

		[SerializeField]
		private bool _isBlockOther;
		public bool isBlockOther { get { return _isBlockOther; } }

		[Serializable]
		public class skillAnimTriggerClass
		{
			public string constructorType;
			public string trigger;
		}
		[SerializeField]
		private skillAnimTriggerClass[] _skillAnimTrigger;
		public skillAnimTriggerClass[] skillAnimTrigger { get { return _skillAnimTrigger; } }

		[SerializeField]
		private string _emitFXPrefab;
		public string emitFXPrefab { get { return _emitFXPrefab; } }

		[SerializeField]
		private string _effectPrefab;
		public string effectPrefab { get { return _effectPrefab; } }

		[SerializeField]
		private string _hitFXPrefab;
		public string hitFXPrefab { get { return _hitFXPrefab; } }

		[SerializeField]
		private string _hexEffectPrefab;
		public string hexEffectPrefab { get { return _hexEffectPrefab; } }

		[SerializeField]
		private string _icon;
		public string icon { get { return _icon; } }


		public SkillData()
		{
		}

#if UNITY_EDITOR
		public SkillData(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _ID);
			TryParse(sheet[row][column++], out _name);
			TryParse(sheet[row][column++], out _duration);
			TryParse(sheet[row][column++], out _effectiveTimes);
			TryParse(sheet[row][column++], out _isDirectEffect);
			TryParse(sheet[row][column++], out _castDelay);
			TryParse(sheet[row][column++], out _chargingDelay);
			TryParse(sheet[row][column++], out _manaCost);
			TryParse(sheet[row][column++], out _usableCount);
			TryParse(sheet[row][column++], out _description);
			TryParse(sheet[row][column++], out _distance);
			TryParse(sheet[row][column++], out _range);
			TryParse(sheet[row][column++], out _skillTargetType);
			TryParse(sheet[row][column++], out _skillTargetSelectorType);
			TryParse(sheet[row][column++], out _skillRangeSelectorType);
			string rawdamageData = sheet[row][column++];
			string[] subsdamageData_0 = rawdamageData.Split(';');
			_damageData = new damageDataClass[subsdamageData_0.Length];
			for (int j = 0; j < subsdamageData_0.Length; ++j)
			{
				var _damageDataone = new damageDataClass();
				_damageData[j] = _damageDataone;
				string[] subsdamageData_1 = subsdamageData_0[j].Split(',');
				for (int i = 0; i < subsdamageData_1.Length; ++i)
				{
					var strValue = subsdamageData_1[i];
					if (i == 0)
						TryParse(strValue, out _damageDataone.dmg);
					else if (i == 1)
						TryParse(strValue, out _damageDataone.correction);
					else if (i == 2)
						TryParse(strValue, out _damageDataone.type);
				}
			}
			string[] _skillDecoratorsArray = sheet[row][column++].Split(',');
			int _skillDecoratorsCount = _skillDecoratorsArray.Length;
			_skillDecorators = new string[_skillDecoratorsCount];
			for(int i = 0; i < _skillDecoratorsCount; i++)
				TryParse(_skillDecoratorsArray[i], out _skillDecorators[i]);
			string rawparamValues = sheet[row][column++];
			string[] subsparamValues_0 = rawparamValues.Split(';');
			_paramValues = new paramValuesClass[subsparamValues_0.Length];
			for (int j = 0; j < subsparamValues_0.Length; ++j)
			{
				var _paramValuesone = new paramValuesClass();
				_paramValues[j] = _paramValuesone;
				string[] subsparamValues_1 = subsparamValues_0[j].Split(',');
				for (int i = 0; i < subsparamValues_1.Length; ++i)
				{
					var strValue = subsparamValues_1[i];
					if (i == 0)
						TryParse(strValue, out _paramValuesone.name);
					else if (i == 1)
						TryParse(strValue, out _paramValuesone.value);
				}
			}
			string[] _addBuffsArray = sheet[row][column++].Split(',');
			int _addBuffsCount = _addBuffsArray.Length;
			_addBuffs = new int[_addBuffsCount];
			for(int i = 0; i < _addBuffsCount; i++)
				TryParse(_addBuffsArray[i], out _addBuffs[i]);
			TryParse(sheet[row][column++], out _isBlockOther);
			string rawskillAnimTrigger = sheet[row][column++];
			string[] subsskillAnimTrigger_0 = rawskillAnimTrigger.Split(';');
			_skillAnimTrigger = new skillAnimTriggerClass[subsskillAnimTrigger_0.Length];
			for (int j = 0; j < subsskillAnimTrigger_0.Length; ++j)
			{
				var _skillAnimTriggerone = new skillAnimTriggerClass();
				_skillAnimTrigger[j] = _skillAnimTriggerone;
				string[] subsskillAnimTrigger_1 = subsskillAnimTrigger_0[j].Split(',');
				for (int i = 0; i < subsskillAnimTrigger_1.Length; ++i)
				{
					var strValue = subsskillAnimTrigger_1[i];
					if (i == 0)
						TryParse(strValue, out _skillAnimTriggerone.constructorType);
					else if (i == 1)
						TryParse(strValue, out _skillAnimTriggerone.trigger);
				}
			}
			TryParse(sheet[row][column++], out _emitFXPrefab);
			TryParse(sheet[row][column++], out _effectPrefab);
			TryParse(sheet[row][column++], out _hitFXPrefab);
			TryParse(sheet[row][column++], out _hexEffectPrefab);
			TryParse(sheet[row][column++], out _icon);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class SkillConfig_SkillData_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<SkillData> elements = new List<SkillData>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as SkillData);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
