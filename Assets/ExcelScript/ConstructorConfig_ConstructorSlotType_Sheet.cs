//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace ExcelConfig
{
	[Serializable]
	public class ConstructorSlotType : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _ID;
		public int ID { get { return _ID; } }

		[SerializeField]
		private string _name;
		public string name { get { return _name; } }

		[SerializeField]
		private string _c_name;
		public string c_name { get { return _c_name; } }

		[SerializeField]
		private string[] _adaptTypes;
		public string[] adaptTypes { get { return _adaptTypes; } }

		[SerializeField]
		private int[] _forbiddenChildrenSlotTypes;
		public int[] forbiddenChildrenSlotTypes { get { return _forbiddenChildrenSlotTypes; } }

		[SerializeField]
		private int[] _forbiddenParentsSlotTypes;
		public int[] forbiddenParentsSlotTypes { get { return _forbiddenParentsSlotTypes; } }

		[SerializeField]
		private bool _isForbiddenAllChildrenSlots;
		public bool isForbiddenAllChildrenSlots { get { return _isForbiddenAllChildrenSlots; } }

		[SerializeField]
		private bool _isForbiddenAllParentsSlots;
		public bool isForbiddenAllParentsSlots { get { return _isForbiddenAllParentsSlots; } }


		public ConstructorSlotType()
		{
		}

#if UNITY_EDITOR
		public ConstructorSlotType(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _ID);
			TryParse(sheet[row][column++], out _name);
			TryParse(sheet[row][column++], out _c_name);
			string[] _adaptTypesArray = sheet[row][column++].Split(',');
			int _adaptTypesCount = _adaptTypesArray.Length;
			_adaptTypes = new string[_adaptTypesCount];
			for(int i = 0; i < _adaptTypesCount; i++)
				TryParse(_adaptTypesArray[i], out _adaptTypes[i]);
			string[] _forbiddenChildrenSlotTypesArray = sheet[row][column++].Split(',');
			int _forbiddenChildrenSlotTypesCount = _forbiddenChildrenSlotTypesArray.Length;
			_forbiddenChildrenSlotTypes = new int[_forbiddenChildrenSlotTypesCount];
			for(int i = 0; i < _forbiddenChildrenSlotTypesCount; i++)
				TryParse(_forbiddenChildrenSlotTypesArray[i], out _forbiddenChildrenSlotTypes[i]);
			string[] _forbiddenParentsSlotTypesArray = sheet[row][column++].Split(',');
			int _forbiddenParentsSlotTypesCount = _forbiddenParentsSlotTypesArray.Length;
			_forbiddenParentsSlotTypes = new int[_forbiddenParentsSlotTypesCount];
			for(int i = 0; i < _forbiddenParentsSlotTypesCount; i++)
				TryParse(_forbiddenParentsSlotTypesArray[i], out _forbiddenParentsSlotTypes[i]);
			TryParse(sheet[row][column++], out _isForbiddenAllChildrenSlots);
			TryParse(sheet[row][column++], out _isForbiddenAllParentsSlots);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class ConstructorConfig_ConstructorSlotType_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<ConstructorSlotType> elements = new List<ConstructorSlotType>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as ConstructorSlotType);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
